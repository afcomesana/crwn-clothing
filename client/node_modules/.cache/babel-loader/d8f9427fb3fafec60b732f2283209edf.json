{"ast":null,"code":"import { createSelector } from 'reselect';\nimport memoize from 'lodash.memoize';\n\nconst selectShop = state => state.shop;\n\nexport const selectCollections = createSelector([selectShop], shop => {\n  console.log(shop);\n  return shop.collections;\n});\nexport const selectCollectionsForPreview = createSelector([selectCollections], collections => collections ? Object.keys(collections).map(key => collections[key]) : []);\nexport const selectCollection = memoize(collectionUrlParam => createSelector([selectCollections], collections => collections ? collections[collectionUrlParam] : null));\nexport const selectIsCollectionFetching = createSelector([selectShop], shop => shop.isFetching);","map":{"version":3,"sources":["C:/Users/adver/Desktop/curso_react/crwn-clothing/src/redux/shop/shop.selectors.js"],"names":["createSelector","memoize","selectShop","state","shop","selectCollections","console","log","collections","selectCollectionsForPreview","Object","keys","map","key","selectCollection","collectionUrlParam","selectIsCollectionFetching","isFetching"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AACA,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAlC;;AAEA,OAAO,MAAMC,iBAAiB,GAAGL,cAAc,CAC3C,CAACE,UAAD,CAD2C,EAE3CE,IAAI,IAAI;AAACE,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAAmB,SAAQA,IAAI,CAACI,WAAb;AAA0B,CAFX,CAAxC;AAKP,OAAO,MAAMC,2BAA2B,GAAGT,cAAc,CACrD,CAACK,iBAAD,CADqD,EAErDG,WAAW,IAAIA,WAAW,GAAGE,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,GAAzB,CAA6BC,GAAG,IAAIL,WAAW,CAACK,GAAD,CAA/C,CAAH,GAA2D,EAFhC,CAAlD;AAKP,OAAO,MAAMC,gBAAgB,GAAGb,OAAO,CAACc,kBAAkB,IACtDf,cAAc,CACV,CAACK,iBAAD,CADU,EAEVG,WAAW,IAAIA,WAAW,GAAGA,WAAW,CAACO,kBAAD,CAAd,GAAqC,IAFrD,CADqB,CAAhC;AAOP,OAAO,MAAMC,0BAA0B,GAAGhB,cAAc,CACpD,CAACE,UAAD,CADoD,EAEpDE,IAAI,IAAIA,IAAI,CAACa,UAFuC,CAAjD","sourcesContent":["import { createSelector } from 'reselect';\r\nimport memoize from 'lodash.memoize';\r\nconst selectShop = state => state.shop;\r\n\r\nexport const selectCollections = createSelector(\r\n    [selectShop],\r\n    shop => {console.log(shop); return (shop.collections)}\r\n);\r\n\r\nexport const selectCollectionsForPreview = createSelector(\r\n    [selectCollections],\r\n    collections => collections ? Object.keys(collections).map(key => collections[key]) : []\r\n);\r\n\r\nexport const selectCollection = memoize(collectionUrlParam =>\r\n    createSelector(\r\n        [selectCollections],\r\n        collections => collections ? collections[collectionUrlParam] : null\r\n    )\r\n);\r\n\r\nexport const selectIsCollectionFetching = createSelector(\r\n    [selectShop],\r\n    shop => shop.isFetching\r\n);"]},"metadata":{},"sourceType":"module"}